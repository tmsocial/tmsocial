input PageQuery {
    before: ID
    after: ID
    first: Int
    last: Int
}

type Query {
    site(id: ID!): Site!
    user(id: ID!): User!
    contest(id: ID!): Contest!
    task(id: ID!): Task!
    submission(id: ID!): Submission!
    evaluation(id: ID!): Evaluation!
    participation(userId: ID!, contestId: ID!): Participation!
    taskParticipation(userId: ID!, taskId: ID!): TaskParticipation!
}

type Site {
    id: ID!
    # contests_list: [Contest!]
}

type Contest {
    id: ID!
    site: Site!
    startTime: String!
    endTime: String!
    tasks: [Task!]!
    participationOfUser(userId: ID!): Participation!
}

type User {
    id: ID!
    site: Site!
    displayName: String!
    participationInContest(contestId: ID!): Participation!
}

type Participation {
    user: User!
    contest: Contest!
    taskParticipations: [TaskParticipation!]!
}

type Task {
    id: ID!
    contest: Contest!
    metadataJson: String!
}

type TaskParticipation {
    user: User!
    task: Task!
    submissions(query: PageQuery): [Submission!]!
    scores: [Score!]!
}

type Submission {
    id: ID!
    cursor: ID!
    taskParticipation: TaskParticipation!
    scoredEvaluation: Evaluation!
    timestamp: String!
    files: [SubmissionFile!]!
    scores: [Score!]!
}

type SubmissionFile {
    field: String!
    type: String!
    contentBase64: String! # Content of the file in base64
}

type Evaluation {
    id: ID!
    events: [EvaluationEvent!]!
    scores: [Score!]!
}

type Score {
    key: String!
    score: Float!
}

type Mutation {
    login(siteId: ID!, user: String!, password: String!): LoginResponse!
    submit(taskId: ID!, userId: ID!, files: [SubmissionFileInput!]!): Submission!
}

input SubmissionFileInput {
    field: String!
    type: String!
    contentBase64: String!
}

type LoginResponse {
    token: String!
    user: User!
}

type Subscription {
    evaluationEvents(evaluationId: ID!): [EvaluationEvent!]!
}

type EvaluationEvent {
    json: String!
}
