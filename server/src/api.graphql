input PageQuery {
    before: ID
    after: ID
    first: Int
    last: Int
}

type Query {
    site(id: ID!): Site!
}

type Site {
    default_contest: Contest
    user(id: ID!): User!
    # contests_list: [Contest!]
}

type Contest {
    tasks: [ContestTask!]!
    task(id: ID): ContestTask!
    participation(user_id: ID!): Participation
    max_score: Int
}

type User {
    display_name: String!
}

type Participation {
    tasks: [ParticipationTask!]
    score: Int
}

interface TaskInterface {
    id: ID!
    metadata_json: String!
}

type ContestTask implements TaskInterface {
    id: ID!    
    metadata_json: String!
}

type ParticipationTask {
    id: ID!
    metadata_json: String!
    submissions(query: PageQuery): [Submission!]!
}

type Submission {
    official_evaluation: Evaluation!
    files: [SubmissionFile!]!
}

type SubmissionFile {
    field: String!
    type: String!
    content: String! # Content of the file in base64
}

type Evaluation {
    total_score: Int!
    partial_scores: [PartialScore!]!
}

type PartialScore {
    display_name: String!
    score: Int!
}

type Mutation {
    login_token(site: ID!, token: String!): LoginResponse!
}

type LoginResponse {
    site: Site!
    user: User!
}

type Subscription {
    evaluation_events(id: ID!): EvaluationEvent!
}

type EvaluationEvent {
    json: String!
}
